plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
}
String gitRevision = "git rev-parse HEAD".execute().text.trim()
version = minecraft_version + "-" + String.valueOf(loader_platform).toLowerCase() + "-" + mod_version + "+" + gitRevision.substring(0, 10)

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")

    // Architectury API
    include(modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}")

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras}"))
    include("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras}:slim")

    // Mixin Squared
    implementation(include("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${rootProject.mixin_squared}"))

    // Conditional Mixin
    implementation(include("com.github.Fallen-Breath.conditional-mixin:conditional-mixin-fabric:${rootProject.conditional_mixin}"))

    // Mod menu
    modImplementation("com.terraformersmc:modmenu:3.2.3")
    modImplementation("me.shedaniel.cloth:cloth-config:${cloth_config_version}")

    // Valkyrien Skies 2
    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${rootProject.vs2_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    // Create compats
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}") {
        exclude group: 'com.github.AlphaMode', module: 'fakeconfigtoml'
    }
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${minecraft_version}:${flywheel_version_fabric}")
    modImplementation("com.tterrag.registrate_fabric:Registrate:${registrate_version}")

    modImplementation("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:$port_lib_version")
//    for (String module in port_lib_modules.split(",")) {
//        modCompileOnly("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version")
//    }

    modCompileOnly("curse.maven:forge-config-api-port-fabric-547434:$config_api_id")
    modCompileOnly("com.jamieswhiteshirt:reach-entity-attributes:${reach_entity_attributes_version}")
    modCompileOnly("dev.cafeteria:fake-player-api:${fake_player_api_version}")
    modCompileOnly("io.github.tropheusj:milk-lib:${milk_lib_version}")

    // Eureka
    modImplementation("maven.modrinth:eureka:1.18.2-fabric-1.4.0-beta.1")

    // Clockwork
    modImplementation("maven.modrinth:create-clockwork:8JdnD9wo")

    // ComputerCraft
    modImplementation("maven.modrinth:cc-tweaked:B9b58ZKh")

    // CBC
    String rplSuffix = Boolean.valueOf(use_local_rpl_build) ? "" : "-build.${rpl_build}";
    modImplementation("com.rbasamoyai:ritchiesprojectilelib:${rpl_version}+mc.${minecraft_version}-fabric" + rplSuffix) { transitive = false }
    modImplementation("maven.modrinth:create-big-cannons:${rootProject.createbigcannons_fabric_id}")

    // Copycat+
    modImplementation("maven.modrinth:copycats:2.0.4+mc.1.20.1-fabric")

    // CC&A
    modImplementation("maven.modrinth:createaddition:vV4bZmhm")

    // VoxelMap Updated
    modCompileOnly("maven.modrinth:voxelmap-updated:1.20.1-1.12.13")

    // Sodium
    modCompileOnly("maven.modrinth:sodium:mc1.20.1-0.5.11")

    // Presence Footsteps
    modCompileOnly("maven.modrinth:presence-footsteps:1.9.4+1.20.1")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "vs2_version": project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
            dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "org.valkyrienskies.eureka"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (project.vs_maven_username && project.vs_maven_password) {
            println "Publishing to VS Maven"
            maven {
                url = project.vs_maven_url
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
        // Add repositories to publish to here.
        if (System.getenv("GITHUB_ACTOR") != null) {
            println "Publishing to Github Packages"
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ValkyrienSkies/Eureka")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}